head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2009.10.07.01.16.53;	author alex;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.06.18.51.07;	author alex;	state Exp;
branches;
next	;


desc
@A bare bone version of setup wizard with multi-language selection.
language selection is not available.
restart suggestion is not available.
@


1.2
log
@It has implement all features designated.
language selection added
restart suggestion added.
@
text
@/**
 * $Header: /home/alex/work/gtk-work/gtk-examples/widget/setuplang.c,v 1.1 2009/10/06 18:51:07 alex Exp alex $
 * $Author: alex $
 * $Date: 2009/10/06 18:51:07 $
 *
 * setuplang.c
 * This program emulates a general setup program which is popular in windows for
 * installing applications. It has 7 pages: first is introduction, next is
 * license declaration, followed by install path selection, then is components
 * selection, next is confirmation about previous work, followed by a progress
 * bar indicating the progress of installing. Then comes the final page with two
 * checkboxes: one is for lanuching program, the other is for view readme.
 * You can select language for installation.
 * The acceptance of license is a check box.
 * You are recommended to restart your computer, but not force.
 *
 * $Revision: 1.1 $
 * $Log: setuplang.c,v $
 * Revision 1.1  2009/10/06 18:51:07  alex
 * Initial revision
 *
 */
#include <gtk/gtk.h>
#include <string.h>

static const char rcs_id[] = "$Id: setuplang.c,v 1.1 2009/10/06 18:51:07 alex Exp alex $";

/* this structure contains all the infos needed for each page of assistant */
typedef struct {
  GtkWidget *widget; /* widget which you want to show to use */
  gint index; 
  const gchar *title;
  GtkAssistantPageType type;
  gboolean complete;
} PageInfo;

#define PAGE_SIZE 8 /* number of pages of asistant */

/* data strucutre used to pass data between signal handlers for each widgets */
typedef struct {
  GtkEntry *entry_path;
  GtkFileChooser *chooser_path;
  GtkCheckButton *check_lang;
  GtkCheckButton *check_user;
  GtkCheckButton *check_font;
  GtkCheckButton *check_kernel;
  GtkCheckButton *check_src;
  GtkCheckButton *check_doc;
  GtkLabel *label_confirmation;
  GtkCheckButton *check_launch;
  GtkCheckButton *check_readme;
  GtkAssistant *assistant;
  GtkProgressBar *progress;
  GtkToggleButton *radio_chs;
  GtkToggleButton *radio_cht;
  GtkToggleButton *radio_en_us;
  GtkToggleButton *radio_en_uk;
  GtkToggleButton *radio_restart;
  GtkToggleButton *radio_no_restart;
  char buffer[ 2048 ];
} Data;

/* signal handlers */
static void path_entered( GtkEntry *entry, Data *data );
static void path_selected( GtkFileChooser *chooser, Data *data );
static void license_toggled( GtkToggleButton *button, GtkAssistant *assistant );
static void lang_toggled( GtkToggleButton *button, Data *data );
static void user_toggled( GtkToggleButton *button, Data *data );
static void font_toggled( GtkToggleButton *button, Data *data );
static void kernel_toggled( GtkToggleButton *button, Data *data );
static void src_toggled( GtkToggleButton *button, Data *data );
static void doc_toggled( GtkToggleButton *button, Data *data );
static void assistant_prepared( GtkAssistant *assistant, GtkWidget *current_page, Data *data );
static void assistant_closed( GtkAssistant *assistant, Data *data );
static void assistant_cancelled( GtkAssistant *assistant, gpointer data );
static gboolean before_exit( GtkWidget *widget, gpointer data );
static void fire_progress_bar( GtkWidget *current_page, Data *data );
static void button_progress_clicked( GtkWidget *button, Data *data ) {
  gtk_widget_set_sensitive( button, FALSE );
  GtkWidget *cpage = gtk_assistant_get_nth_page( data->assistant, 6 );
  fire_progress_bar( cpage, data );
}

/* main program */
int main( int argc, char **argv ) {
  gtk_init( &argc, &argv );

  /* initialize each page */
  PageInfo page[ PAGE_SIZE ] = {
    { NULL, -1, "Introduction", GTK_ASSISTANT_PAGE_INTRO, TRUE },
    { NULL, -1, "Select language", GTK_ASSISTANT_PAGE_CONTENT, TRUE },
    { NULL, -1, "Lisence", GTK_ASSISTANT_PAGE_CONTENT, FALSE },
    { NULL, -1, "Install path", GTK_ASSISTANT_PAGE_CONTENT, TRUE },
    { NULL, -1, "Components", GTK_ASSISTANT_PAGE_CONTENT, FALSE },
    { NULL, -1, "Confirmation", GTK_ASSISTANT_PAGE_CONTENT, TRUE },
    { NULL, -1, "Progress", GTK_ASSISTANT_PAGE_PROGRESS, FALSE },
    { NULL, -1, "Finish", GTK_ASSISTANT_PAGE_CONFIRM, TRUE },
  };

  /* create a new assistant widget with no pages */
  GtkWidget *assistant = gtk_assistant_new();
  gtk_widget_set_size_request( assistant, 450, 300 );
  gtk_window_set_title( GTK_WINDOW( assistant ), "Installing Program" );
  gtk_container_set_border_width( GTK_CONTAINER( assistant ), 10 );

  /* initialize widgets for each page */
  page[ 0 ].widget = gtk_label_new( "Welcome to Program installation\n"
      "This wizard will instruct you to install Program on your computer" );
  page[ 1 ].widget = gtk_vbox_new( FALSE, 5 );
  page[ 2 ].widget = gtk_vbox_new( FALSE, 5 );
  page[ 3 ].widget = gtk_vbox_new( FALSE, 5 );
  page[ 4 ].widget = gtk_vbox_new( TRUE, 5 );
  page[ 5 ].widget = gtk_vbox_new( TRUE, 5 );
  page[ 6 ].widget = gtk_vbox_new( TRUE, 5 );
  page[ 7 ].widget = gtk_vbox_new( TRUE, 5 );

  /* create the necessary widgets for page 1: select language */
  GtkWidget *label_lang  = gtk_label_new( "Select the language you want to use during\n"
      "installation." );
  GtkWidget *radio_chs = gtk_radio_button_new_with_label( NULL, "Chinese simplified" );
  GtkWidget *radio_en_us = gtk_radio_button_new_with_label_from_widget(
      GTK_RADIO_BUTTON( radio_chs ), "English US" );
  GtkWidget *radio_en_uk = gtk_radio_button_new_with_label_from_widget( 
      GTK_RADIO_BUTTON( radio_chs ), "English UK" );
  GtkWidget *radio_cht = gtk_radio_button_new_with_label_from_widget(
      GTK_RADIO_BUTTON( radio_chs ), "Chinese Tridition" );
  gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON( radio_en_us ), TRUE );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), label_lang, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), radio_chs, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), radio_cht, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), radio_en_us, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), radio_en_uk, TRUE, TRUE, 5 );

  /* create the necessary widgets for page 2: License */
  GtkWidget *label_license = gtk_label_new( "Lisence\nTo use this program" 
      "You have to agree the following lisnce:\n"
      "You are free to do any thing\n"
      "you can re-distribute freely\n"
      "change the program as you wish\n"
      "without any constrains\n" );
  GtkWidget *check_license = gtk_check_button_new_with_label( "I accept the license" );
  gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON( check_license ), FALSE );
  gtk_box_pack_start( GTK_BOX( page[2].widget ), label_license, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[2].widget ), check_license, FALSE, FALSE, 5 );

  /* create the necessary widgets for page 3: install path */
  GtkWidget *label_path = gtk_label_new( "Select a path on which you want to install the program" );
  GtkWidget *entry_path = gtk_entry_new();
  GtkWidget *chooser_path = gtk_file_chooser_button_new( "Select a path",
      GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER );
  /* give path a default value */
  gtk_entry_set_text( GTK_ENTRY( entry_path ), g_get_home_dir() );
  gtk_file_chooser_set_current_folder( GTK_FILE_CHOOSER( chooser_path ), g_get_home_dir() );
  GtkWidget *hbox_label = gtk_hbox_new( TRUE, 5 );
  GtkWidget *hbox_path = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_label ), label_path, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_path ), entry_path, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_path ), chooser_path, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), hbox_label, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), hbox_path, FALSE, FALSE, 5 );

  /* create the necessary widgets for page 4: component page */
  GtkWidget *label_component = gtk_label_new( 
      "Select the components you want to install on your computer" );
  GtkWidget *check_lang = gtk_check_button_new_with_label( "Multi-language support" );
  GtkWidget *check_font = gtk_check_button_new_with_label( "Multi-font support" );
  GtkWidget *check_user = gtk_check_button_new_with_label( "Mutli-user support" );
  GtkWidget *check_kernel = gtk_check_button_new_with_label( "Install kernel" );
  GtkWidget *check_doc = gtk_check_button_new_with_label( "Install documentations" );
  GtkWidget *check_src = gtk_check_button_new_with_label( "Install sources" );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), label_component, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_lang, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_font, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_user, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_kernel, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_doc, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[4].widget ), check_src, FALSE, FALSE, 5 );

  /* create the necessary widgets for page 5: confirmation page */
  /* this page's contents will change according to previous editions */
  GtkWidget *label_confirmation = gtk_label_new( "\n\n\n\n\n\n\n\n\n\n\n" );
  gtk_box_pack_start_defaults( GTK_BOX( page[5].widget ), label_confirmation );

  /* create the necessary widgets for page 6: installing progress */
  GtkWidget *label_progress = gtk_label_new( "The program is being installed, please wait..." );
  GtkWidget *progress = gtk_progress_bar_new();
  /* GtkWidget *label_tmp1 = gtk_label_new( "\t" );
  GtkWidget *label_tmp2 = gtk_label_new( "\t" ); */
  GtkWidget *hbox_progress = gtk_hbox_new( FALSE, 5 );
  GtkWidget *button_progress = gtk_button_new_with_label( "Start installing" );
  /* gtk_box_pack_start( GTK_BOX( hbox_progress ), label_tmp1, FALSE, FALSE, 10 ); */
  gtk_box_pack_start( GTK_BOX( hbox_progress ), progress, TRUE, TRUE, 10 );
  /* gtk_box_pack_start( GTK_BOX( hbox_progress ), label_tmp2, FALSE, FALSE, 10 ); */
  gtk_box_pack_start( GTK_BOX( hbox_progress ), button_progress, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[6].widget ), label_progress, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[6].widget ), hbox_progress, FALSE, FALSE, 10 );

  /* craete the necessary widgets for page 7: the final page */
  GtkWidget *label_restart = gtk_label_new( "To finish installing Program\n"
      "you have to restart computer, would you like Install\ndo it for you" );
  GtkWidget *radio_restart = gtk_radio_button_new_with_label( NULL,
      "Yes, restart computer now." );
  GtkWidget *radio_no_restart = gtk_radio_button_new_with_label_from_widget(
      GTK_RADIO_BUTTON( radio_restart ), "No, i will restart computer later." );
  gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON( radio_restart ), TRUE );
  gtk_box_pack_start( GTK_BOX( page[7].widget ), label_restart, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[7].widget ), radio_restart, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[7].widget ), radio_no_restart, FALSE, FALSE, 10 );

  /* add five pages to assistant */
  int i;
  for ( i = 0; i < PAGE_SIZE; i++ ) {
    /* first, append page onto assistant */
    page[ i ].index = gtk_assistant_append_page( GTK_ASSISTANT( assistant ), page[i].widget );
    /* set attributes */
    gtk_assistant_set_page_title( GTK_ASSISTANT( assistant ), page[i].widget, page[i].title );
    gtk_assistant_set_page_type( GTK_ASSISTANT( assistant ), page[i].widget, page[i].type );
    gtk_assistant_set_page_complete( GTK_ASSISTANT( assistant ), page[i].widget, page[i].complete );
  }

  Data data;
  data.entry_path = GTK_ENTRY( entry_path );
  data.chooser_path = GTK_FILE_CHOOSER( chooser_path );
  data.check_lang = GTK_CHECK_BUTTON( check_lang );
  data.check_user = GTK_CHECK_BUTTON( check_user );
  data.check_font = GTK_CHECK_BUTTON( check_font );
  data.check_kernel = GTK_CHECK_BUTTON( check_kernel );
  data.check_src = GTK_CHECK_BUTTON( check_src );
  data.check_doc = GTK_CHECK_BUTTON( check_doc );;
  data.label_confirmation = GTK_LABEL( label_confirmation );
  data.assistant = GTK_ASSISTANT( assistant );
  data.progress = GTK_PROGRESS_BAR( progress );
  data.radio_chs = GTK_TOGGLE_BUTTON( radio_chs );
  data.radio_cht = GTK_TOGGLE_BUTTON( radio_cht );
  data.radio_en_us = GTK_TOGGLE_BUTTON( radio_en_us );
  data.radio_en_uk = GTK_TOGGLE_BUTTON( radio_en_uk );
  data.radio_restart = GTK_TOGGLE_BUTTON( radio_restart );
  data.radio_no_restart = GTK_TOGGLE_BUTTON( radio_no_restart );
  data.buffer[ 0 ] = '\0';

  /*
   * set event handler for page 2 and page 4.
   * the handlers will update page2 and page 4 as complete if the pre-conditions
   * are set.
   */

  g_signal_connect( G_OBJECT( entry_path ), "changed", G_CALLBACK( path_entered ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( chooser_path ), "file_set", G_CALLBACK( path_selected ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_license ), "toggled", G_CALLBACK( license_toggled ), 
      (gpointer) assistant );
  g_signal_connect( G_OBJECT( check_lang ), "toggled", G_CALLBACK( lang_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_user ), "toggled", G_CALLBACK( user_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_font ), "toggled", G_CALLBACK( font_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_src ), "toggled", G_CALLBACK( src_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_doc ), "toggled", G_CALLBACK( doc_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( check_kernel ), "toggled", G_CALLBACK( kernel_toggled ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( assistant ), "prepare", G_CALLBACK( assistant_prepared ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( assistant ), "close", G_CALLBACK( assistant_closed ), 
      (gpointer) &data );
  g_signal_connect( G_OBJECT( assistant ), "cancel", G_CALLBACK( assistant_cancelled ), NULL );
  g_signal_connect( G_OBJECT( button_progress ), "clicked", G_CALLBACK( button_progress_clicked ), 
      (gpointer) &data );

  gtk_widget_show_all( assistant );
  gtk_main();
  return 0;
}

static void path_entered( GtkEntry *entry, Data *data ) {
  /* we have to synchronize entry and chooser for path */
  const char *path = gtk_entry_get_text( entry );
  gboolean enabled = strlen( path ) > 0;
  enabled = ( enabled && g_file_test( path, G_FILE_TEST_EXISTS ) );
  enabled = ( enabled && g_file_test( path, G_FILE_TEST_IS_DIR ) );
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
  if ( enabled ) {
    gtk_file_chooser_set_current_folder( data->chooser_path, path );
  }
  gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
}

static void path_selected( GtkFileChooser *chooser, Data *data ) {
  /* we have to synchronize entry and chooser for path */
  const char *path = gtk_file_chooser_get_filename( chooser );
  gboolean enabled = strlen( path ) > 0;
  enabled = ( enabled && g_file_test( path, G_FILE_TEST_EXISTS ) );
  enabled = ( enabled && g_file_test( path, G_FILE_TEST_IS_DIR ) );
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
  if ( enabled ) {
    gtk_entry_set_text( data->entry_path, path );
  }
  gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
}

static void license_toggled( GtkToggleButton *button, GtkAssistant *assistant ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( assistant, 2 );
  if ( gtk_toggle_button_get_active( button ) ) {
    gtk_assistant_set_page_complete( assistant, current_page, TRUE );
  } else {
    gtk_assistant_set_page_complete( assistant, current_page, FALSE );
  }
}

static void lang_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tMulti-language support" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}

static void user_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tMulti-user support" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}

static void font_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tMulti-font support" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}
static void kernel_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tInstall Kernel" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}
static void src_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tInstall source" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}

static void doc_toggled( GtkToggleButton *button, Data *data ) {
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 4 );
  if ( gtk_toggle_button_get_active( button ) ) {
    strcat( data->buffer, "\n\tInstall documentations" );
    gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
  } else {
    gboolean enabled = FALSE;
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_lang ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_user ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_src ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_doc ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_kernel ) ) );
    enabled = ( enabled || gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_font ) ) );
    gtk_assistant_set_page_complete( data->assistant, current_page, enabled );
    char *p = strrchr( data->buffer, '\n' );
    *p = '\0';
  }
}

static void assistant_prepared( GtkAssistant *assistant, GtkWidget *current_page, Data *data ) {
  /* printf( "prepareing for new page\n" ); */
  GtkWidget *seventh_page = gtk_assistant_get_nth_page( assistant, 7 );
  GtkWidget *fifth_page = gtk_assistant_get_nth_page( assistant, 5 );
  GtkWidget *fourth_page = gtk_assistant_get_nth_page( assistant, 4 );
  GtkWidget *third_page = gtk_assistant_get_nth_page( assistant, 2 );
  if ( current_page == third_page ) {
    if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_chs ) ) ) {
      printf( "we are gonna use chinese simplified during installation\n" );
    } else if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_cht ) ) ) {
      printf( "we area gonna use chinese traditional during installtion\n" );
    } else if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_en_us ) ) ) {
      printf( "we are gonna use english us during installation\n" );
    } else if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_en_uk ) ) ) {
      printf( "we are gonna use english uk during installation\n" );
    }
  } else if ( current_page == fourth_page ) {
    const char *path = gtk_entry_get_text( data->entry_path );
    data->buffer[ 0 ] = '\0';
    strcpy( data->buffer, "Install program at:" );
    strcat( data->buffer, path );
    strcat( data->buffer, "\nThe following components will be installed:" );
    /* printf( "data->buffer is: '%s'\n", data->buffer ); */
  } else if ( current_page == fifth_page) {
    /* printf( "preparing for 5th page\n" ); */
    gtk_label_set_text( data->label_confirmation, data->buffer );
    /* printf( "data->buffer is: '%s'\n", data->buffer ); */
  } else if ( current_page == seventh_page ) {
    /* fire_progress_bar( current_page, data ); */
    /* printf( "entering page 7\n" ); */
  }
}

/* event handler for page 4, most important part of this program, a new guy: progressbar comes */
static void fire_progress_bar( GtkWidget *current_page, Data *data ) {
  /* 
   * Fill up the progress bar, 10% every second when the button is clicked.
   * Then set the page as complete when the progress bar is filled
   */
  gdouble percent = 0.f;
  while ( percent <= 100.f ) {
    gchar *msg = g_strdup_printf( "%.0f%% Complete", percent );
    gtk_progress_bar_set_fraction( data->progress , percent / 100.f );
    gtk_progress_bar_set_text( data->progress, msg );

    while ( gtk_events_pending() ) {
      gtk_main_iteration();
    }

    g_usleep( 500000 );
    percent += 5.f;
  }

  gtk_assistant_set_page_complete( data->assistant, current_page, TRUE );
}

/* event handler for cancel button of assistant */
static void assistant_cancelled( GtkAssistant *assistant, gpointer data ) {
  /*
   * Show a prompt dialog
   */
  before_exit( GTK_WIDGET( assistant ), data );
}

/* event handler for close operation */
static void assistant_closed( GtkAssistant *assistant, Data *data ) {
  if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_restart ) ) ) {
    printf( "your computer is about to restart...\n" );
  } else if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->radio_no_restart ) ) ) {
    printf( "you can restart your computer later\n" );
  }
  g_print( "You would apply your changes now\n" );
  gtk_widget_destroy( GTK_WIDGET( assistant ) );
  gtk_main_quit();
}

static gboolean before_exit( GtkWidget *widget, gpointer data ) {
  /* show a dialog */
  GtkWidget *dialog = gtk_dialog_new_with_buttons( "Information", GTK_WINDOW( widget ),
      GTK_DIALOG_MODAL, GTK_STOCK_NO, GTK_RESPONSE_NO, GTK_STOCK_YES, GTK_RESPONSE_YES,
      NULL );
  gtk_dialog_set_has_separator( GTK_DIALOG( dialog ), TRUE );
  GtkWidget *label = gtk_label_new( "Do you really want to leave Program Installation?" );
  GtkWidget *image = gtk_image_new_from_stock( GTK_STOCK_DIALOG_INFO,
      GTK_ICON_SIZE_DIALOG );

  /* organize and arrange widgets on dialog */
  GtkWidget *hbox = gtk_hbox_new( FALSE, 5 );
  gtk_container_set_border_width( GTK_CONTAINER( hbox ), 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), image, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), label, FALSE, FALSE, 10 );
  GtkWidget *ask_always = gtk_check_button_new_with_label( "Always ask before leaving." );
  /*
   * Here if you donot add ask_always on a hbox, add it on vbox directly, they
   * look great differently.
   * For homogenous, you'd better put all the widgets on boxes, even sometimes,
   * there is only one widget.
   */
  GtkWidget *hbox_ask = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_ask ), ask_always, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox_ask, FALSE, FALSE, 10 );
  gtk_widget_show_all( dialog );

  int result; /* result of running dialog according to different clicking of user */
  result = gtk_dialog_run( GTK_DIALOG( dialog ) );
  if ( result == GTK_RESPONSE_YES ) {
    gtk_main_quit();
    return TRUE;
  }
  gtk_widget_destroy( dialog );
  return TRUE;
}

/* End of $Source: /home/alex/work/gtk-work/gtk-examples/widget/setuplang.c,v $ */
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * $Header$
 * $Author$
 * $Date$
d17 5
a21 2
 * $Revision$
 * $Log$
d26 1
a26 1
static const char rcs_id[] = "$Id$";
d37 1
a37 1
#define PAGE_SIZE 7 /* number of pages of asistant */
d54 6
d80 1
a80 1
  GtkWidget *cpage = gtk_assistant_get_nth_page( data->assistant, 5 );
d91 1
d111 1
a111 1
  page[ 3 ].widget = gtk_vbox_new( TRUE, 5 );
d115 18
d143 2
a144 2
  gtk_box_pack_start( GTK_BOX( page[1].widget ), label_license, TRUE, TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( page[1].widget ), check_license, FALSE, FALSE, 5 );
d159 2
a160 2
  gtk_box_pack_start( GTK_BOX( page[2].widget ), hbox_label, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[2].widget ), hbox_path, FALSE, FALSE, 5 );
d171 7
a177 7
  gtk_box_pack_start( GTK_BOX( page[3].widget ), label_component, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_lang, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_font, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_user, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_kernel, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_doc, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( page[3].widget ), check_src, FALSE, FALSE, 5 );
d182 1
a182 1
  gtk_box_pack_start_defaults( GTK_BOX( page[4].widget ), label_confirmation );
d187 2
a188 2
  GtkWidget *label_tmp1 = gtk_label_new( "\t" );
  GtkWidget *label_tmp2 = gtk_label_new( "\t" );
d195 2
a196 2
  gtk_box_pack_start( GTK_BOX( page[5].widget ), label_progress, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[5].widget ), hbox_progress, FALSE, FALSE, 10 );
d199 10
a208 8
  GtkWidget *check_launch = gtk_check_button_new_with_label( "Launch the program after installing" );
  GtkWidget *check_readme = gtk_check_button_new_with_label( "View Readme after installing" );
  GtkWidget *hbox_launch = gtk_hbox_new( TRUE, 5 );
  GtkWidget *hbox_readme = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_launch ), check_launch, TRUE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox_readme ), check_readme, TRUE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( page[6].widget ), hbox_launch, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( page[6].widget ), hbox_readme, FALSE, FALSE, 10 );
a230 2
  data.check_launch = GTK_CHECK_BUTTON( check_launch );
  data.check_readme = GTK_CHECK_BUTTON( check_readme );
d233 6
d284 1
a284 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 2 );
d297 1
a297 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 2 );
d305 1
a305 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( assistant, 1 );
d314 1
a314 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d333 1
a333 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d352 1
a352 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d370 1
a370 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d388 1
a388 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d407 1
a407 1
  GtkWidget *current_page = gtk_assistant_get_nth_page( data->assistant, 3 );
d427 15
a441 4
  GtkWidget *seventh_page = gtk_assistant_get_nth_page( assistant, 6 );
  GtkWidget *fifth_page = gtk_assistant_get_nth_page( assistant, 4 );
  GtkWidget *fourth_page = gtk_assistant_get_nth_page( assistant, 3 );
  if ( current_page == fourth_page ) {
d491 5
a496 6
  if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_launch ) ) ) {
    printf( "the program will be launched immediately\n" );
  }
  if ( gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( data->check_readme ) ) ) {
    printf( "you are about to read file readme\n" );
  }
d538 2
a539 1
/* End of $Source$ */
@
