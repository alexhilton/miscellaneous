head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.10.07.16.00.33;	author alex;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.07.15.06.02;	author alex;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.07.03.50.45;	author alex;	state Exp;
branches;
next	;


desc
@Using notebooks to edit properties.
The font and color tab cannot work.
We might add a progress bar on apply_edit.
@


1.3
log
@Add fold of long line.
@
text
@/**
 * $Header: /home/alex/work/gtk-work/gtk-examples/widget/properties.c,v 1.2 2009/10/07 15:06:02 alex Exp alex $
 * $Author: alex $
 * $Date: 2009/10/07 15:06:02 $
 *
 * properties.c
 * This program shows a main window with a label and two buttons -- one is exit,
 * the other is edit. Button exit will prompting a dialog then quit. Button eidt
 * will edit the properties of label using a notebook including content, font
 * and color. There are three buttons on notebook, cancel, ok and apply. Cancel
 * will discard the edits and return to main window. OK will apply the current
 * edits and return to main window. Apply will apply the current edits and
 * continue let user to edit. Everything you click or apply there is a dialog
 * showing progress of applying, with two additional buttons cancel and ok. OK
 * will fire up the progress bar and when progress bar is full the properties
 * will be applied. If cancel is clicked, do not apply the edits.
 * $Revision: 1.2 $
 * $Log: properties.c,v $
 * Revision 1.2  2009/10/07 15:06:02  alex
 * Now it can implement all the features.
 * property edit works fine.
 * TODO: label needs to fold to multiple lines when there are so many inputs.
 * We can add some other edits like change to lower case or capitalized.
 *
 * Revision 1.1  2009/10/07 03:50:45  alex
 * Initial revision
 *
 */
#include <gtk/gtk.h>
#include <stdio.h>
#include <string.h>

static const char rcs_id[] = "$Id: properties.c,v 1.2 2009/10/07 15:06:02 alex Exp alex $";
#define MAXLEN 2048
#define COLUMN 30
#define TAB 8

/* all properties of label on main window */
static char buffer[ MAXLEN ];
static PangoFontDescription *desc;
static GdkColor color;

typedef struct {
  GtkWindow *window;
  GtkLabel *label;
} Data;

/* signal handlers */
static void exit_clicked( GtkButton *button, GtkWindow *window );
static gboolean before_exit( GtkWindow *window, gpointer data );
static void edit_clicked( GtkButton *button, Data *data );
static void entry_entered( GtkEntry *entry, gpointer data );
static void font_clicked( GtkFontButton *button, gpointer data );
static void color_clicked( GtkColorButton *button, gpointer data );
static void apply_edit( GtkWindow *window, GtkLabel *label );
static int smartfold( char line[], char wrap[], int limit );
static int dealtab( char line[], int limit );

int main( int argc, char **argv ) {
  gtk_init( &argc, &argv );

  /* create the main window with one label and two buttons on it */
  GtkWidget *window = gtk_window_new( GTK_WINDOW_TOPLEVEL );
  gtk_container_set_border_width( GTK_CONTAINER( window ), 20 );
  gtk_widget_set_size_request( window, 640, 480 );
  gtk_window_set_title( GTK_WINDOW( window ), "Property edition" );

  strcpy( buffer, "\n\n\n\n\n\nWith Great power comes great responsibility\n\n\n\n\n\n\n" );
  GtkWidget *label = gtk_label_new( buffer );
  gdk_color_parse( "#003366", &color );
  desc = pango_font_description_from_string( "Sans Bold 12" );
  gtk_widget_modify_font( label, desc );
  gtk_widget_modify_fg( label, GTK_STATE_NORMAL, &color );

  GtkWidget *exit = gtk_button_new_with_mnemonic( "E_xit" );
  GtkWidget *edit = gtk_button_new_with_mnemonic( "_Edit" );

  GtkWidget *hbox_button = gtk_hbox_new( TRUE, 5 );
  GtkWidget *label_space = gtk_label_new( "\t\t\t\t\t\t\t\t\t\t\t" );
  gtk_box_pack_start( GTK_BOX( hbox_button ), label_space, TRUE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox_button ), exit, FALSE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox_button ), edit, FALSE, TRUE, 10 );
  GtkWidget *hbox_label = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_label ), label, TRUE, TRUE, 10 );
  GtkWidget *vbox = gtk_vbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox ), hbox_label, TRUE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( vbox ), hbox_button, FALSE, FALSE, 10 );

  Data data;
  data.window = GTK_WINDOW( window );
  data.label = GTK_LABEL( label );

  g_signal_connect( G_OBJECT( window ), "delete_event", G_CALLBACK( before_exit ), NULL );
  g_signal_connect( G_OBJECT( exit ), "clicked", G_CALLBACK( exit_clicked ), 
      (gpointer) window );
  g_signal_connect( G_OBJECT( edit ), "clicked", G_CALLBACK( edit_clicked ), 
      (gpointer) &data );

  gtk_container_add( GTK_CONTAINER( window ), vbox );
  gtk_widget_show_all( window );
  gtk_main();
  return 0;
}

static void exit_clicked( GtkButton *button, GtkWindow *window ) {
  before_exit( window, NULL );
}

static gboolean before_exit( GtkWindow *widget, gpointer data ) {
  /* show a dialog */
  GtkWidget *dialog = gtk_dialog_new_with_buttons( "Information", widget,
      GTK_DIALOG_MODAL, GTK_STOCK_NO, GTK_RESPONSE_NO, GTK_STOCK_YES, GTK_RESPONSE_YES,
      NULL );
  gtk_dialog_set_has_separator( GTK_DIALOG( dialog ), TRUE );
  GtkWidget *label = gtk_label_new( "Do you really want to leave Property Edit?" );
  GtkWidget *image = gtk_image_new_from_stock( GTK_STOCK_DIALOG_INFO,
      GTK_ICON_SIZE_DIALOG );

  /* organize and arrange widgets on dialog */
  GtkWidget *hbox = gtk_hbox_new( FALSE, 5 );
  gtk_container_set_border_width( GTK_CONTAINER( hbox ), 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), image, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), label, FALSE, FALSE, 10 );
  GtkWidget *ask_always = gtk_check_button_new_with_label( "Always ask before leaving." );
  /*
   * Here if you donot add ask_always on a hbox, add it on vbox directly, they
   * look great differently.
   * For homogenous, you'd better put all the widgets on boxes, even sometimes,
   * there is only one widget.
   */
  GtkWidget *hbox_ask = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_ask ), ask_always, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox_ask, FALSE, FALSE, 10 );
  gtk_widget_show_all( dialog );

  int result; /* result of running dialog according to different clicking of user */
  result = gtk_dialog_run( GTK_DIALOG( dialog ) );
  if ( result == GTK_RESPONSE_YES ) {
    gtk_main_quit();
    return TRUE;
  }
  gtk_widget_destroy( dialog );
  return TRUE;
}

static void edit_clicked( GtkButton *button, Data *data ) {
  GtkWidget *dialog = gtk_dialog_new_with_buttons( "Edit Properties", data->window,
      GTK_DIALOG_MODAL, GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
      GTK_STOCK_OK, GTK_RESPONSE_OK, GTK_STOCK_APPLY, GTK_RESPONSE_APPLY,
      NULL );
  gtk_widget_set_size_request( dialog, 480, 360 );
  gtk_dialog_set_has_separator( GTK_DIALOG( dialog ), TRUE );

  GtkWidget *notebook = gtk_notebook_new();

  /* fill the notebook */
  GtkWidget *label_content = gtk_label_new( "Content" );
  GtkWidget *label_font = gtk_label_new( "Font" );
  GtkWidget *label_color = gtk_label_new( "Color" );

  /* for content, an entry for user to enter new text */
  GtkWidget *entry = gtk_entry_new();
  GtkWidget *vbox_content = gtk_vbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox_content ), entry, TRUE, TRUE, 10 );
  g_signal_connect( G_OBJECT( entry ), "changed", G_CALLBACK( entry_entered ), NULL );

  /* for font, a font button */
  GtkWidget *font = gtk_font_button_new();
  GtkWidget *vbox_font = gtk_vbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox_font ), font, FALSE, FALSE, 10 );
  /**
   * Note: for built-in buttons like font button, color button and file chooser
   * button, you should never handle the signal "clicked". You should handle
   * "font_set", "color_set" and "file_set" instead. Otherwise you cannot get
   * the info returned from that button.
   */
  g_signal_connect( G_OBJECT( font ), "font_set", G_CALLBACK( font_clicked ), NULL );

  /* for color, a color button */
  GtkWidget *color = gtk_color_button_new();
  GtkWidget *vbox_color = gtk_vbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox_color ), color, FALSE, FALSE, 10 );
  g_signal_connect( G_OBJECT( color ), "color_set", G_CALLBACK( color_clicked ), NULL );

  /* put those widgets on notebook */
  gtk_notebook_append_page( GTK_NOTEBOOK( notebook ), vbox_content, label_content );
  gtk_notebook_append_page( GTK_NOTEBOOK( notebook ), vbox_font, label_font );
  gtk_notebook_append_page( GTK_NOTEBOOK( notebook ), vbox_color, label_color );

  /* finally put notebook on this dialog and deal with responses */
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), notebook, TRUE, TRUE, 10 );
  gtk_widget_show_all( dialog );

  int result; /* result of running dialog according to different clicking of user */
  /**
   * When click Cancel, we return to main window and do nothing.
   * If ok clicked, we apply the current settings and return to main window.
   * If apply, we apply the current settings and do not return to main window.
   * For acheiving that, we can destroy the dialog only on responses of cancel
   * and ok. When clicking apply, we have to re-show the dialog and get the
   * response. Until ok or cancel is clicked.
   */
  while ( 1 ) {
    result = gtk_dialog_run( GTK_DIALOG( dialog ) );
    if ( result == GTK_RESPONSE_CANCEL ) {
      gtk_widget_destroy( dialog );
      break;
    } else if ( result == GTK_RESPONSE_OK ) {
      apply_edit( GTK_WINDOW( dialog ), data->label );
      gtk_widget_destroy( dialog );
      break;
    } else if ( result == GTK_RESPONSE_APPLY ) {
      apply_edit( GTK_WINDOW( dialog ), data->label );
    }
  }
}

static void entry_entered( GtkEntry *entry, gpointer data ) {
  const char *text = gtk_entry_get_text( entry );
  strcpy( buffer, text );
}

static void font_clicked( GtkFontButton *button, gpointer data ) {
  const char *fontname = gtk_font_button_get_font_name( button );
  /* printf( "new font name is: %s\n", fontname ); */
  desc = pango_font_description_from_string( fontname );
}

static void color_clicked( GtkColorButton *button, gpointer data ) {
  gtk_color_button_get_color( button, &color );
}

static void apply_edit( GtkWindow *window, GtkLabel *label_main ) {
  GtkWidget *dialog = gtk_dialog_new_with_buttons( "Apply your edits", window,
      GTK_DIALOG_MODAL, GTK_STOCK_NO, GTK_RESPONSE_NO,
      GTK_STOCK_YES, GTK_RESPONSE_YES, NULL );
  gtk_dialog_set_has_separator( GTK_DIALOG( dialog ), TRUE );
  GtkWidget *label = gtk_label_new( "Do you really want to apply those "
      "edits to label on main window?" );
  GtkWidget *image = gtk_image_new_from_stock( GTK_STOCK_DIALOG_INFO,
      GTK_ICON_SIZE_DIALOG );

  /* organize and arrange widgets on dialog */
  GtkWidget *hbox = gtk_hbox_new( FALSE, 5 );
  gtk_container_set_border_width( GTK_CONTAINER( hbox ), 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), image, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), label, FALSE, FALSE, 10 );
  GtkWidget *ask_always = gtk_check_button_new_with_label( "Always ask before"
      " applying new properties." );
  /*
   * Here if you donot add ask_always on a hbox, add it on vbox directly, they
   * look great differently.
   * For homogenous, you'd better put all the widgets on boxes, even sometimes,
   * there is only one widget.
   */
  GtkWidget *hbox_ask = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_ask ), ask_always, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), hbox_ask, FALSE, FALSE, 10 );
  gtk_widget_show_all( dialog );

  int result; /* result of running dialog according to different clicking of user */
  result = gtk_dialog_run( GTK_DIALOG( dialog ) );
  if ( result == GTK_RESPONSE_YES ) {
    /* apply those new properties to label on main window */
    /* printf( "applying new properties\n" ); */
    char wrap[ 2*MAXLEN ];
    char *p;
    /* printf( "%s\n", buffer ); */
    dealtab( buffer, MAXLEN );
    /* fprintf( stdout, "==============================\n" ); */
    if ( smartfold( buffer, wrap, 2*MAXLEN ) != 0 ) {
      p = buffer;
    } else {
      p = wrap;
    }
    /* fprintf( stdout, "%s\n", wrap ); */
    /* fprintf( stdout, "==============================\n" ); */
    gtk_label_set_text( label_main, p );
    gtk_widget_modify_font( GTK_WIDGET( label_main ), desc );
    gtk_widget_modify_fg( GTK_WIDGET( label_main ), GTK_STATE_NORMAL, &color );
  }
  gtk_widget_destroy( dialog );
}

static int smartfold( char line[], char wrap[], int limit ) {
  int i, j, k, pos;
  for ( i = j = pos = 0; line[i] != '\0'; i++, j++ ) {
    if ( pos >= COLUMN ) {
      /* all troubles are here */
      if ( line[i] != ' ' && line[i] != '\n' ) {
	/* find last ' ' or '\n' in this section */
	k = i;
	while ( line[ k ] != ' ' && line[ k ] != '\n' ) {
	  k--;
	}
	/* now line[ k ] is ' ' or '\n' */
	j -= ( i - k );
	i = k;
      }
      wrap[ j ] = '\n';
      pos -= COLUMN;
    } else {
      wrap[ j ] = line[ i ];
      pos++;
    }
    if ( j >= limit ) {
      return -1;
    }
  }
  wrap[ j ] = '\0';
  return 0;
}

static int dealtab( char line[], int limit ) {
  int i, j, k, nextstop, nextcol;
  char tmp[ 2*MAXLEN ]; /* use dynamic allocation might be a better design */
  for ( i = j = 0; line[ i ] != '\0'; i++ ) {
    if ( line[ i ] == '\t' ) {
      nextstop = i + TAB - i % TAB;
      nextcol = nextstop + (COLUMN - nextstop % COLUMN) - COLUMN;
      /*printf( "nextstop=%d, nextcol=%d: %s\n", nextstop, nextcol, __func__ );
       */
      if ( nextstop > nextcol ) {
	/* we need to expand this tab into corresponding blanks */
	/* printf( "get any: %s\n", __func__ ); */
	for ( k = i; k < nextstop; k++ ) {
	  tmp[ j++ ] = ' ';
	}
      } else {
	tmp[ j++ ] = line[ i ];
      }
    } else {
      tmp[ j++ ] = line[ i ];
    }
    if ( j >= limit ) {
      return -1;
    }
  }
  tmp[ j ] = '\0';
  strcpy( line, tmp );
  return 0;
}

/* End of $Source: /home/alex/work/gtk-work/gtk-examples/widget/properties.c,v $ */
@


1.2
log
@Now it can implement all the features.
property edit works fine.
TODO: label needs to fold to multiple lines when there are so many inputs.
We can add some other edits like change to lower case or capitalized.
@
text
@d2 1
a2 1
 * $Header: /home/alex/work/gtk-work/gtk-examples/widget/properties.c,v 1.1 2009/10/07 03:50:45 alex Exp alex $
d4 1
a4 1
 * $Date: 2009/10/07 03:50:45 $
d17 1
a17 1
 * $Revision: 1.1 $
d19 6
d33 4
a36 1
static const char rcs_id[] = "$Id: properties.c,v 1.1 2009/10/07 03:50:45 alex Exp alex $";
d39 1
a39 1
static char buffer[ 2048 ];
d56 2
d115 1
a115 1
  GtkWidget *label = gtk_label_new( "Do you really want to leave Property Eidt?" );
d267 14
a280 2
    printf( "applying new properties\n" );
    gtk_label_set_text( label_main, buffer );
d287 59
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * $Header$
 * $Author$
 * $Date$
d17 5
a21 2
 * $Revision$
 * $Log$
d27 1
a27 1
static const char rcs_id[] = "$Id$";
d161 7
a167 1
  g_signal_connect( G_OBJECT( font ), "clicked", G_CALLBACK( font_clicked ), NULL );
d173 1
a173 1
  g_signal_connect( G_OBJECT( color ), "clicked", G_CALLBACK( color_clicked ), NULL );
d185 8
d215 1
d264 1
a264 1
/* End of $Source$ */
@
