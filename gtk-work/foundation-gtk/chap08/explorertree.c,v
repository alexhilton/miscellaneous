head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2009.11.14.04.38.31;	author alex;	state Exp;
branches;
next	;


desc
@It works as expected
@


1.1
log
@Initial revision
@
text
@/*
 * $Header$
 * $Author$
 * $Date$
 * RCS Id: $Id$
 * explorertree.c
 * Implement a simple file explorer.
 * It can browse a single folder at a time, listing all the entries in that
 * folder with three fields: file name, access permissions and file size. There
 * are buttons to control the program: Open -- open a new folder, Exit -- exit
 * the program. Default directory is user home.
 * Here we use dir manipulation functions from glib, for portability's sake.
 * $Revision$
 * $Log$
 */
#include <gtk/gtk.h>
#include <glib.h>
#include <unistd.h>
#include <string.h>
#include <sys/stat.h>
#include <errno.h>

enum { NAME = 0x0, PERM = 0x01, SIZE = 0x02, COLUMNS = 0x03 };
/* Signal handler for window */
static gboolean before_exit( GtkWindow *window, gpointer data );
static gboolean window_close( GtkWindow *window, GdkEvent *event, 
    gpointer data );
static void close_clicked( GtkButton *close, GtkWindow *window );
static void setup_model( const gchar *path, GtkTreeStore *model, GtkTreeIter *parent );
static void open_clicked( GtkFileChooser *chooser, GtkTreeStore *model );
static void setup_treeview( GtkTreeView *treeview );
static int add_row( const char *file, GtkTreeStore *model, GtkTreeIter *parent );

int main( int argc, char **argv ) {
  gtk_init( &argc, &argv );
  /* Create and setup the main window */
  GtkWidget *window = gtk_window_new( GTK_WINDOW_TOPLEVEL );
  gtk_window_set_title( GTK_WINDOW( window ), "Explorer" );
  gtk_widget_set_size_request( window, 800, 600 );
  gtk_container_set_border_width( GTK_CONTAINER( window ), 10 );

  /* Create and setup the menu bar: Open and Exit */
  GtkWidget *close = gtk_button_new_from_stock( GTK_STOCK_CLOSE );
  GtkWidget *label = gtk_label_new( "Select a folder: " );
  GtkWidget *open = gtk_file_chooser_button_new( "Browse",
      GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER );
  gtk_file_chooser_set_current_folder( GTK_FILE_CHOOSER( open ),
      g_get_home_dir() );

  /* create and set up the tree model */
  GtkTreeStore *model = gtk_tree_store_new( COLUMNS, G_TYPE_STRING, 
      G_TYPE_STRING, G_TYPE_INT );

  /* Create and set up the tree view */
  GtkWidget *treeview = gtk_tree_view_new();
  setup_treeview( GTK_TREE_VIEW( treeview ) );

  gtk_tree_view_set_model( GTK_TREE_VIEW( treeview ), GTK_TREE_MODEL( model ) );
  g_object_unref( model );


  /* connect signals of objects to their signal handler */
  g_signal_connect( G_OBJECT( window ), "delete_event", 
      G_CALLBACK( window_close ), NULL );
  g_signal_connect( G_OBJECT( close ), "clicked", G_CALLBACK( close_clicked ),
      (gpointer) window );
  /*
   * Here we cannot use 'file_set'. There are a lot directories in button's list
   * as a shortcut for selecting neighbors. Event 'file_set' will not be
   * emitted, when you select from those shortcuts. It will, only, be emitted
   * when you click "Others", select a file and click OK in chooser dialog.
   * Event 'selection_changed', however, will be emitted selecting from either
   * shortcuts or in dialog.
   */
  g_signal_connect( G_OBJECT( open ), "selection_changed", G_CALLBACK( open_clicked ),
      (gpointer) model );

  /* Add menu bar to a hbox */
  GtkWidget *hbox = gtk_hbox_new( FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox ), close, FALSE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), label, FALSE, TRUE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), open, TRUE, TRUE, 10 );

  /* Add treeview to scrolled window */
  GtkWidget *scrolled_window = gtk_scrolled_window_new( NULL, NULL );
  gtk_scrolled_window_set_policy( GTK_SCROLLED_WINDOW( scrolled_window ),
      GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC );
  gtk_container_add( GTK_CONTAINER( scrolled_window ), treeview );

  /* Use a vbox to hole hbox and scrolled window */
  GtkWidget *vbox = gtk_vbox_new( FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox ), hbox, FALSE, FALSE, 5 );
  gtk_box_pack_start( GTK_BOX( vbox ), scrolled_window, TRUE, TRUE, 5 );
  /* Add them to main window */
  gtk_container_add( GTK_CONTAINER( window ), vbox );
  gtk_widget_show_all( window );
  gtk_main();
  return 0;
}

static gboolean window_close( GtkWindow *window, GdkEvent *event, 
    gpointer data ) {
  return before_exit( window, data );
}

static gboolean before_exit( GtkWindow *widget, gpointer data ) {
  /* show a dialog */
  GtkWidget *dialog = gtk_dialog_new_with_buttons( "Information", 
      widget, GTK_DIALOG_MODAL, GTK_STOCK_NO, GTK_RESPONSE_NO, 
      GTK_STOCK_YES, GTK_RESPONSE_YES,
      NULL );
  gtk_dialog_set_has_separator( GTK_DIALOG( dialog ), TRUE );
  GtkWidget *label = 
      gtk_label_new( "Do you really want to leave File Explorer?" );
  GtkWidget *image = gtk_image_new_from_stock( GTK_STOCK_DIALOG_INFO,
      GTK_ICON_SIZE_DIALOG );

  /* organize and arrange widgets on dialog */
  GtkWidget *hbox = gtk_hbox_new( FALSE, 5 );
  gtk_container_set_border_width( GTK_CONTAINER( hbox ), 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), image, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( hbox ), label, FALSE, FALSE, 10 );
  GtkWidget *ask_always = 
      gtk_check_button_new_with_label( "Always ask before leaving." );
  /*
   * Here if you donot add ask_always on a hbox, add it on vbox directly, they
   * look great differently.
   * For homogenous, you'd better put all the widgets on boxes, even sometimes,
   * there is only one widget.
   */
  GtkWidget *hbox_ask = gtk_hbox_new( TRUE, 5 );
  gtk_box_pack_start( GTK_BOX( hbox_ask ), ask_always, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), 
      hbox, FALSE, FALSE, 10 );
  gtk_box_pack_start( GTK_BOX( GTK_DIALOG(dialog)->vbox ), 
      hbox_ask, FALSE, FALSE, 10 );
  gtk_widget_show_all( dialog );
  /* result of running dialog according to different clicking of user */
  int result; 
  result = gtk_dialog_run( GTK_DIALOG( dialog ) );
  if ( result == GTK_RESPONSE_YES ) {
    gtk_main_quit();
    return TRUE;
  }
  gtk_widget_destroy( dialog );
  return TRUE;
}

static void close_clicked( GtkButton *button, GtkWindow *window ) {
  before_exit( window, NULL );
}

static void open_clicked( GtkFileChooser *chooser, GtkTreeStore *model ) {
  const char *path = gtk_file_chooser_get_filename( chooser );
  /*
   * For a new directory set by user, all are root row.
   */
  /* First, empty the previous data, because it is a totally new directory */
  gtk_tree_store_clear( model );
  setup_model( path, model, NULL );
}

static void setup_treeview( GtkTreeView *treeview ) {
  /* 
   * Create a new GtkCellRenderText, add it to the tree view column
   * and append the column to the tree view 
   */
  GtkCellRenderer *renderer = gtk_cell_renderer_text_new();
  GtkTreeViewColumn *column = gtk_tree_view_column_new_with_attributes(
      "Filename", renderer, "text", NAME, NULL );
  gtk_tree_view_append_column( GTK_TREE_VIEW( treeview ), column );

  renderer = gtk_cell_renderer_text_new();
  column = gtk_tree_view_column_new_with_attributes(
      "Permissions", renderer, "text", PERM, NULL );
  gtk_tree_view_append_column( GTK_TREE_VIEW( treeview ), column );
  renderer = gtk_cell_renderer_text_new();
  column = gtk_tree_view_column_new_with_attributes(
        "Size", renderer, "text", SIZE, NULL );
  gtk_tree_view_append_column( GTK_TREE_VIEW( treeview ), column );
}

/*
 * Here path is a directory, we opne the directory and read each of its entries,
 * then call add row to get information of a file and add the infos into the
 * model as a new row.
 */
static void setup_model( const gchar *path, GtkTreeStore *model, GtkTreeIter *parent ) {
  GDir *dp;
  if ( (dp = g_dir_open( path, 0, NULL )) == NULL ) {
    g_print( "error on open '%s': %s\n", path, strerror( errno ) );
    return;
  }
  /* save the current working directory */
  char cwd[ 1024 ];
  getcwd( cwd, 1024 );
  chdir( path );
  const char *file;
  while ( (file = g_dir_read_name( dp )) != NULL ) {
    /* Skip hidden files */
    if ( *file == '.' ) {
      continue;
    }
    add_row( file, model, parent );
  }
  g_dir_close( dp );
  /* restore original working directory */
  chdir( cwd );
}

/*
 * Here file is a file -- an entry of an directory, we use stat to get
 * information about the file: its permissions and file size. Then add those
 * informations into the model as a new row.
 * Here we use Linux's system calls to get information of a file, we will then
 * find a portable way.
 */
static int add_row( const char *file, GtkTreeStore *model, GtkTreeIter *parent ) {
  struct stat buf;
  if ( stat( file, &buf ) != 0 ) {
    fprintf( stderr, "error on stat '%s': %s\n", file, strerror( errno ) );
    return -1;
  }
  char attr[ 11 ]; /* one type, nine permissions and one for '\0' */
  if ( S_ISDIR( buf.st_mode ) ) {
    attr[ 0 ] = 'd';
  } else {
    attr[ 0 ] = '-';
  }
  if ( (S_IRUSR & buf.st_mode) == S_IRUSR ) {
    attr[ 1 ] = 'r';
  } else {
    attr[ 1 ] = '-';
  }
  if ( (S_IWUSR & buf.st_mode) == S_IWUSR ) {
    attr[ 2 ] = 'w';
  } else {
    attr[ 2 ] = '-';
  }
  if ( (S_IXUSR & buf.st_mode) == S_IXUSR ) {
    attr[ 3 ] = 'x';
  } else {
    attr[ 3 ] = '-';
  }
  if ( (S_IRGRP & buf.st_mode) == S_IRGRP ) {
    attr[ 4 ] = 'r';
  } else {
    attr[ 4 ] = '-';
  }
  if ( (S_IWGRP & buf.st_mode) == S_IWGRP ) {
    attr[ 5 ] = 'w';
  } else {
    attr[ 5 ] = '-';
  }
  if ( (S_IXGRP & buf.st_mode) == S_IXGRP ) {
    attr[ 6 ] = 'x';
  } else {
    attr[ 6 ] = '-';
  }
  if ( (S_IROTH & buf.st_mode) == S_IROTH ) {
    attr[ 7 ] = 'r';
  } else {
    attr[ 7 ] = '-';
  }
  if ( (S_IWOTH & buf.st_mode) == S_IWOTH ) {
    attr[ 8 ] = 'w';
  } else {
    attr[ 8 ] = '-';
  }
  if ( (S_IXOTH & buf.st_mode) == S_IXOTH ) {
    attr[ 9 ] = 'x';
  } else {
    attr[ 9 ] = '-';
  }
  attr[ 10 ] = '\0';

  /* Now it is the time to add a new row to model */
  GtkTreeIter iter;
  gtk_tree_store_append( model, &iter, parent );
  /* Here you must use an -1 to indicate an end, No other alternatives */
  gtk_tree_store_set( model, &iter, NAME, file, PERM, attr, 
      SIZE, buf.st_size, -1 );
  if ( *attr == 'd' ) {
    /* Call setup_model recursively */
    setup_model( file, model, &iter);
  }
  return 0;
}

/* End of $Source$ */
@
